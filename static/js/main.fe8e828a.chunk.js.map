{"version":3,"sources":["components/Navbar.js","Store.js","components/Expenses/ExpenseInput.js","components/Display/ExpenseList.js","components/Display/Display.js","components/Expenses/Expenses.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","Component","ExpenseContext","React","createContext","reducer","state","action","type","Object","objectSpread","expenses","ExpenseProvider","dispatch","_this","setState","Provider","value","this","props","children","ExpenseConsumer","Consumer","ExpenseInput","expenseName","price","category","handleInput","e","defineProperty","target","name","handleSubmit","preventDefault","addExpenses","concat","toConsumableArray","_this2","onSubmit","bind","onChange","min","step","max","defaultValue","selectValue","selected","disabled","onClick","ExpenseList","expensesList","length","map","expense","index","key","Display","totalExpense","reduce","accumulator","currentValue","parseInt","Display_ExpenseList","Expenses","Expenses_ExpenseInput","components_Display_Display","App","components_Navbar","components_Expenses_Expenses","Boolean","window","location","hostname","match","ReactDOM","render","Store_ExpenseProvider","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe8e828a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Navbar extends Component {\n    render(){\n        return(\n            <div className= \"navbar navbar-light bg-info\">\n                <div className=\"container\">\n                    <h2 className= \"text-white\">Expense Tracker</h2>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Navbar;","import React, { Component } from \"react\";\n\nconst ExpenseContext = React.createContext();\n\nconst reducer = (state, action) => {\n    switch(action.type) {\n        case \"ADD_EXPENSE\":\n        return {\n            ...state,\n            expenses:action.expenses\n            \n        }\n        default:\n        return state;\n    }\n}\n\nclass ExpenseProvider extends Component {\n\n    state={\n        expenses: [],\n\n        dispatch: action=> this.setState(state=>reducer( state, action ))\n    }\n    render(){\n        return(\n            <ExpenseContext.Provider value={this.state}>\n                {this.props.children}\n            </ExpenseContext.Provider>\n        )\n    }\n}\n\nconst ExpenseConsumer =ExpenseContext.Consumer;\n\nexport { ExpenseProvider, ExpenseConsumer };","import React, { Component } from \"react\";\nimport { ExpenseConsumer } from \"../../Store\";\n\n\nclass ExpenseInput extends Component {\n    state = {\n        expenses: [],\n        expenseName: '',\n        price: '',\n        category: ''\n    }\n    handleInput = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit = (dispatch, e) => {\n        e.preventDefault()\n        dispatch({\n            type: \"ADD_EXPENSE\",\n            expenses: this.state.expenses\n        })\n    }\n\n    addExpenses = () => {\n        this.setState({\n            expenses: [\n                ...this.state.expenses,\n                {expenseName: this.state.expenseName, price: this.state.price, category: this.state.category}\n            ],\n            expenseName: '',\n            price: ''\n        })\n    }\n    render(){\n        return(\n            <ExpenseConsumer>\n                {value => {\n                    const { dispatch } = value\n                    return(\n                        <div className=\"card card-body\">\n                <label>Name of purchase</label>\n                <form onSubmit={this.handleSubmit.bind(this, dispatch)}>\n                    <input\n                        onChange={this.handleInput}\n                        value={this.state.expenseName}\n                        className=\"form-control\"\n                        name=\"expenseName\"\n                    />\n                <label>Price</label>\n                    <input\n                        onChange={this.handleInput}\n                        value={this.state.price}\n                        className=\"form-control mr-2\"\n                        name=\"price\"\n                        type=\"number\"\n                        min=\"0.01\"\n                        step=\"0.01\"\n                        max=\"5000\"\n\n                    />\n                <label>Category</label>\n                    <select defaultValue={this.state.selectValue}\n                            onChange={this.handleInput}\n                            className=\"form-control\"\n                            name=\"category\">\n                        <option selected disabled>Please Select a Category</option>\n                        <option>Food and Drink</option>\n                        <option>Transportation</option>\n                        <option>Clothing</option>\n                        <option>Personal Care</option>\n                        <option>Misc.</option>\n                    </select>\n                    <br />\n                    <button onClick={this.addExpenses} className=\"btn btn-dark\">Submit</button>\n                </form>\n            </div>\n                    )\n                }}\n            </ExpenseConsumer>\n            \n        )\n    }\n}\n\nexport default ExpenseInput","import React, { Component } from \"react\";\nimport { ExpenseConsumer }from \"../../Store\"\n\nclass ExpenseList extends Component {\n    render() {\n        return(\n            <div className=\"card mt-5\">\n                <table className=\"table-bordered\">\n                    <thead>\n                        <tr>\n                            <th>Name Of Expense</th>\n                            <th>Price</th>\n                            <th>Category</th>\n                        </tr>\n                    </thead>\n                    <ExpenseConsumer>\n                        {value => {\n                            const expensesList = value.expenses.length > 0 ? (\n                                value.expenses.map((expense, index) => {\n                                    return(\n                                        <tr  key={index}>\n                                            <td>{expense.expenseName}</td>\n                                            <td>${expense.price}</td>\n                                            <td>{expense.category}</td>\n                                        </tr>\n                                    )\n                                    \n                                })\n                            ) : (\n                                <tr>\n                                    <td>No Expenses Posted Yet</td>\n                                </tr>\n                            )\n                            return <tbody>{expensesList}</tbody>\n                        }}\n                    </ExpenseConsumer>\n\n                </table>\n\n            </div>\n        )\n    }\n}\n\nexport default ExpenseList;","import React from \"react\";\nimport ExpenseList from \"./ExpenseList\"\nimport { ExpenseConsumer } from \"../../Store\";\n\n\nconst Display = () => {\n    return(\n        <ExpenseConsumer>\n            {value => {   \n                const totalExpense = value.expenses.length > 0 ? (\n                    value.expenses.reduce((accumulator, currentValue) => {\n                        accumulator += parseInt(currentValue.price)\n                        return accumulator\n                    },0)) : 0;\n                 return(\n                <div className=\"card card-body\">\n                    <h3 className=\"text-center\">Your Total Expenses: ${totalExpense}</h3>\n                    <ExpenseList />\n                </div>\n                 )\n            }}\n        </ExpenseConsumer>\n    )\n    \n} \n\nexport default Display;","import React from \"react\";\nimport ExpenseInput from \"./ExpenseInput\";\nimport Display from \"../Display/Display\"\n\n\nconst Expenses = () => {\n    return (\n        <div className=\"row\">\n            <div className=\"col-lg-4\">\n            <ExpenseInput />\n            </div>\n            <div className=\"col-lg-8\">\n               <Display />\n            </div>\n        </div>\n    )\n}\n\nexport default Expenses;","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar\";\nimport Expenses from \"./components/Expenses/Expenses\"; \n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <div className=\"container my-5\">\n          <Expenses />\n        </div>\n        <div>\n          {/* <Chart /> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { ExpenseProvider } from \"./Store\"\n\nReactDOM.render(\n    <ExpenseProvider>\n        <App />\n    </ExpenseProvider>\n\n,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}